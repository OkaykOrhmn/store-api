// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output = "src/generated/client"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// model Car{
//   id Int @id @default(autoincrement())
//   model String
//   year Int
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId Int
// }

model User {
  id Int @id @default(autoincrement())
  username String @unique 
  password String
  likes Like[]
  // cars Car[]
}

model Product{
  id Int @id @default(autoincrement())
  name String  @unique
  price Float @default(0)
  isAvailable Boolean
  mainImageUrl String
  banners String[]
  rate Float
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  description String
  highlights Highlight[]
  createdAt DateTime  @default(now())
  likes Like[]
}

model Highlight{
  id Int @id @default(autoincrement())
  name String
  desc String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

}

model Category{
  id Int @id @default(autoincrement())
  name String
  imageUrl String
  product Product[]
}

model Like{
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  @@id([userId, productId])
}
